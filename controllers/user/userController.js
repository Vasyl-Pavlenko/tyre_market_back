const User = require('../../models/User');
const bcrypt= require('bcryptjs');

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
exports.getMe = async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select('-password');

    if (!user) {
      return res.status(404).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    res.json(user);
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é:', err);
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é: —ñ–º º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –º—ñ—Å—Ç–æ
exports.updateProfile = async (req, res) => {
  try {
    const { name, phone, city } = req.body;

    const user = await User.findById(req.user.id);

    if (!user) {
      return res.status(404).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    if (name) {
      user.name = name;
    }

    if (phone) {
      user.phone = phone;
    }

    if (city) {
      user.city = city;
    }

    await user.save();

    res.json({ message: '–ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ', user });
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é:', err);
    res.status(500).json({ message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å' });
  }
};

// üîí –ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è
exports.changePassword = async (req, res) => {
  try {
    const { oldPassword, newPassword } = req.body;

    if (!oldPassword || !newPassword) {
      return res.status(400).json({ message: '–°—Ç–∞—Ä–∏–π —Ç–∞ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –æ–±–æ–≤ º—è–∑–∫–æ–≤—ñ' });
    }

    // –ó–Ω–∞–π–¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ id –∑ —Ç–æ–∫–µ–Ω–∞
    const user = await User.findById(req.user.id);

    if (!user) {
      return res.status(404).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ä–æ–ª—è
    const isMatch = await bcrypt.compare(oldPassword, user.passwordHash);

    if (!isMatch) {
      return res.status(400).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Å—Ç–∞—Ä–∏–π –ø–∞—Ä–æ–ª—å' });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ —Ö–µ—à—É –¥–ª—è –ø–∞—Ä–æ–ª—è
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(newPassword, salt);

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è –≤ –±–∞–∑—ñ
    user.passwordHash = hashedPassword; // –û–Ω–æ–≤–ª–µ–Ω–Ω—è passwordHash
    await user.save();

    res.json({ message: '–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ' });
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø–∞—Ä–æ–ª—è:', err);
    res.status(500).json({ message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å' });
  }
};


