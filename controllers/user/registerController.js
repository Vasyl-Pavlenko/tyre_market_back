const User = require('../../models/User');
const bcrypt = require('bcryptjs');
const crypto = require('crypto');
const nodemailer = require('nodemailer');

const transporter = nodemailer.createTransport({
  host: process.env.BREVO_HOST,
  port: 587,
  auth: {
    user: process.env.BREVO_USER,
    pass: process.env.BREVO_API_KEY,
  },
  tls: {
    rejectUnauthorized: false,
  },
});

exports.register = async (req, res) => {
  const { name, email, password } = req.body;

  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
    if (!name || !email || !password) {
      return res.status(403).json({ message: '–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è' });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const existing = await User.findOne({ email });

    if (existing) {
      return res.status(403).json({ message: 'Email –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ' });
    }

    // –•–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
    const passwordHash = await bcrypt.hash(password, 10);

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email
    const emailConfirmationToken = crypto.randomBytes(32).toString('hex');
    const tokenExpires = Date.now() + 60 * 60 * 1000;

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const newUser = new User({
      name,
      email,
      passwordHash,
      emailConfirmationToken,
      emailConfirmationTokenExpires: tokenExpires,
      isEmailConfirmed: false,
    });

    await newUser.save();

    // URL –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email
    const confirmUrl = `${process.env.FRONTEND_URL}/confirm-email?token=${emailConfirmationToken}`;

    // –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ª–∏—Å—Ç–∞ –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º
    await transporter.sendMail({
      from: process.env.BREVO_FROM_EMAIL,
      to: newUser.email,
      subject: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞ —Å–∞–π—Ç—ñ Omega Tyres',
      html: `
        <div style="font-family: Arial, sans-serif; background-color: #f9f9f9; padding: 24px;">
          <div style="max-width: 600px; margin: auto; background: white; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); padding: 32px;">
            <h2 style="color: #1e3a8a; text-align: center;">–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Omega Tyres! üöó</h2>
            <p style="font-size: 16px; color: #333;">
              –î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –Ω–∞ –Ω–∞—à–æ–º—É —Å–µ—Ä–≤—ñ—Å—ñ. –©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É.
            </p>
            <div style="text-align: center; margin: 24px 0;">
              <a href="${confirmUrl}" style="display: inline-block; background-color: #1e3a8a; color: white; text-decoration: none; padding: 12px 24px; border-radius: 6px; font-weight: bold;">
                –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ email
              </a>
            </div>
            <p style="font-size: 14px; color: #666;">
              –ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥—ñ–π—Å–Ω–µ –ø—Ä–æ—Ç—è–≥–æ–º 1 –≥–æ–¥–∏–Ω–∏. –Ø–∫—â–æ –≤–∏ –Ω–µ —Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—å –Ω–∞ —Å–∞–π—Ç—ñ Omega Tyres, –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É–π—Ç–µ —Ü–µ–π –ª–∏—Å—Ç.
            </p>
            <hr style="margin: 32px 0;">
            <p style="font-size: 12px; color: #aaa; text-align: center;">
              Omega Tyres ‚Äì –≤–∞—à –Ω–∞–¥—ñ–π–Ω–∏–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å —à–∏–Ω.
            </p>
          </div>
        </div>
      `,
    });

    res.status(201).json({ message: '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ—à—Ç—É.' });
  } catch (err) {
    console.error('Register error:', err);
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};
